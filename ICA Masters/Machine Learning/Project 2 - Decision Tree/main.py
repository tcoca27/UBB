"""decision_tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZLwBAxmh4W2lOoqKMcaSYdC-M5TZjgrv
"""

import pandas
import matplotlib.pyplot as plt
import seaborn
from sklearn.model_selection import KFold
from sklearn import metrics


def data_analysis(features):
    features_copy = features
    result_dict = {'D': 0, 'H': 1, 'A': 2}
    for key in result_dict.keys():
        features_copy = features_copy.replace(key, result_dict[key])
    teams_dict = {"Arsenal": 0, "Bournemouth": 1, "Brighton": 2, "Burnley": 3, "Cardiff": 4, "Chelsea": 5,
                  "Crystal Palace": 6, "Everton": 7, "Fulham": 8, "Huddersfield": 9,
                  "Leicester": 10, "Liverpool": 11, "Man City": 12, "Man United": 13, "Newcastle": 14,
                  "Southampton": 15, "Tottenham": 16, "Watford": 17, "West Ham": 18, "Wolves": 19}
    for key in teams_dict.keys():
        features_copy = features_copy.replace(key, teams_dict[key])
    plt.figure(figsize=(16, 16))
    seaborn.heatmap(features_copy.corr(), annot=True)

    features_copy.plot(x='FTR', y='AR', style='o')

    ar = features_copy[(features_copy.HR > 0) & (features_copy.AR == 0) & (features_copy.FTR == 2)]
    print(len(ar))
    ar = features_copy[(features_copy.HR > 0)]
    ar.plot(x='FTR', y='HR', style='o')


def unique_vals(rows, col):
    """Find the unique values for a column in a dataset."""
    return set([row[col] for row in rows])


def class_counts(rows):
    """Counts the number of each type of example in a dataset."""
    counts = {}  # a dictionary of label -> count.
    for row in rows:
        label = row[-1]
        if label not in counts:
            counts[label] = 0
        counts[label] += 1
    return counts

def is_numeric(value):
    """Test if a value is numeric."""
    return isinstance(value, int) or isinstance(value, float)


class Question:
    """A Question is used to partition a dataset.

    This class just records a 'column number' (e.g., 0 for HomeTeam) and a
    'column value' (e.g., Arsenal). The 'match' method is used to compare
    the feature value in an example to the feature value stored in the
    question.
    """

    def __init__(self, column, value):
        self.column = column
        self.value = value

    def match(self, example):
        # Compare the feature value in an example to the
        # feature value in this question.
        val = example[self.column]
        if is_numeric(val):
            return val >= self.value
        else:
            return val == self.value

    def __repr__(self):
        # This is just a helper method to print
        # the question in a readable format.
        condition = "=="
        if is_numeric(self.value):
            condition = ">="
        return "Is %s %s %s?" % (
            header[self.column], condition, str(self.value))

def partition(rows, question):
    """Partitions a dataset.

    For each row in the dataset, check if it matches the question. If
    so, add it to 'true rows', otherwise, add it to 'false rows'.
    """
    true_rows, false_rows = [], []
    for row in rows:
        if question.match(row):
            true_rows.append(row)
        else:
            false_rows.append(row)
    return true_rows, false_rows

def gini(rows):
    """Calculate the Gini Impurity for a list of rows."""
    counts = class_counts(rows)
    impurity = 1
    for lbl in counts:
        prob_of_lbl = counts[lbl] / float(len(rows))
        impurity -= prob_of_lbl**2
    return impurity

def info_gain(left, right, current_uncertainty):
    """Information Gain.

    The uncertainty of the starting node, minus the weighted impurity of
    two child nodes.
    """
    p = float(len(left)) / (len(left) + len(right))
    return current_uncertainty - p * gini(left) - (1 - p) * gini(right)

def find_best_split(rows):
    """Find the best question to ask by iterating over every feature / value
    and calculating the information gain."""
    best_gain = 0  # keep track of the best information gain
    best_question = None  # keep train of the feature / value that produced it
    current_uncertainty = gini(rows)
    n_features = len(rows[0]) - 1  # number of columns

    for col in range(n_features):  # for each feature

        values = unique_vals(rows, col)  # unique values in the column

        for val in values:  # for each value

            question = Question(col, val)

            # try splitting the dataset
            true_rows, false_rows = partition(rows, question)

            # Skip this split if it doesn't divide the
            # dataset.
            if len(true_rows) == 0 or len(false_rows) == 0:
                continue

            # Calculate the information gain from this split
            gain = info_gain(true_rows, false_rows, current_uncertainty)

            if gain >= best_gain:
                best_gain, best_question = gain, question

    return best_gain, best_question

class Leaf:
    """A Leaf node classifies data.

    This holds a dictionary of class (e.g., "HomeWin") -> number of times
    it appears in the rows from the training data that reach this leaf.
    """

    def __init__(self, rows):
        self.predictions = class_counts(rows)

class Decision_Node:
    """A Decision Node asks a question.

    This holds a reference to the question, and to the two child nodes.
    """

    def __init__(self,
                 question,
                 true_branch,
                 false_branch):
        self.question = question
        self.true_branch = true_branch
        self.false_branch = false_branch

def build_tree(rows):
    """Builds the tree."""

    # Try partitioing the dataset on each of the unique attribute, calculate the information gain,
    # and return the question that produces the highest gain.
    gain, question = find_best_split(rows)

    # Base case: no further info gain
    # Since we can ask no further questions, we'll return a leaf.
    if gain == 0:
        return Leaf(rows)

    # If we reach here, we have found a useful feature / value to partition on.
    true_rows, false_rows = partition(rows, question)

    # Recursively build the true branch.
    true_branch = build_tree(true_rows)

    # Recursively build the false branch.
    false_branch = build_tree(false_rows)

    # Return a Question node.
    # This records the best feature / value to ask at this point,
    # as well as the branches to follow depending on the answer.
    return Decision_Node(question, true_branch, false_branch)

def print_tree(node, spacing=""):

    # Base case: we've reached a leaf
    if isinstance(node, Leaf):
        print (spacing + "Predict", node.predictions)
        return

    # Print the question at this node
    print (spacing + str(node.question))

    # Call this function recursively on the true branch
    print (spacing + '--> True:')
    print_tree(node.true_branch, spacing + "  ")

    # Call this function recursively on the false branch
    print (spacing + '--> False:')
    print_tree(node.false_branch, spacing + "  ")

def classify(row, node):

    # Base case: we've reached a leaf
    if isinstance(node, Leaf):
        return node.predictions

    # Decide whether to follow the true-branch or the false-branch.
    # Compare the feature / value stored in the node, to the example we're considering.
    if node.question.match(row):
        return classify(row, node.true_branch)
    else:
        return classify(row, node.false_branch)


def prediction_measures(testing_data, my_tree):
    actual_y = []
    pred_y = []
    for row in testing_data:
        actual_y.append(row[-1])
        pred_y.append(list(classify(row, my_tree).keys())[0])
    conf_matrix = metrics.confusion_matrix(actual_y, pred_y)
    print('Confusion Matrix:\n', conf_matrix)
    classif_report = metrics.classification_report(actual_y, pred_y, digits=3, output_dict=True)
    print('Classification Report:\n', metrics.classification_report(actual_y, pred_y, digits=3, output_dict=False))

    result_dict = {'D': 0, 'H': 1, 'A': 2}
    pred_y_numbers = []
    for pred in pred_y:
        pred_y_numbers.append(result_dict[pred])

    actual_y_numbers = []
    for pred in actual_y:
        actual_y_numbers.append(result_dict[pred])

    fpr, tpr, thresholds = metrics.roc_curve(actual_y_numbers, pred_y_numbers, pos_label=2)
    auc = metrics.auc(fpr, tpr)
    print('AUC score: ', auc)
    print('\n\n\n')
    classif_report['auc'] = auc
    return classif_report


def average_classification_reports(classification_reports):
    A = {'precision': 0, 'recall': 0, 'f1-score': 0, 'support': 0}
    D = {'precision': 0, 'recall': 0, 'f1-score': 0, 'support': 0}
    H = {'precision': 0, 'recall': 0, 'f1-score': 0, 'support': 0}
    accuracy = 0
    weighted_avg = {'precision': 0, 'recall': 0, 'f1-score': 0, 'support': 0}
    auc = 0
    for report in classification_reports:
        accuracy += report['accuracy']
        auc += report['auc']
        A['precision'] += report['A']['precision']
        A['recall'] += report['A']['recall']
        A['f1-score'] += report['A']['f1-score']
        A['support'] += report['A']['support']
        D['precision'] += report['D']['precision']
        D['recall'] += report['D']['recall']
        D['f1-score'] += report['D']['f1-score']
        D['support'] += report['D']['support']
        H['precision'] += report['H']['precision']
        H['recall'] += report['H']['recall']
        H['f1-score'] += report['H']['f1-score']
        H['support'] += report['H']['support']
        weighted_avg['precision'] += report['weighted avg']['precision']
        weighted_avg['recall'] += report['weighted avg']['recall']
        weighted_avg['f1-score'] += report['weighted avg']['f1-score']
        weighted_avg['support'] += report['weighted avg']['support']
    A['precision'] /= len(classification_reports)
    A['recall'] /= len(classification_reports)
    A['f1-score'] /= len(classification_reports)
    D['precision'] /= len(classification_reports)
    D['recall'] /= len(classification_reports)
    D['f1-score'] /= len(classification_reports)
    H['precision'] /= len(classification_reports)
    H['recall'] /= len(classification_reports)
    H['f1-score'] /= len(classification_reports)
    weighted_avg['precision'] /= len(classification_reports)
    weighted_avg['recall'] /= len(classification_reports)
    weighted_avg['f1-score'] /= len(classification_reports)
    accuracy /= len(classification_reports)
    auc /= len(classification_reports)
    print('Average A:', A)
    print('Average D:', D)
    print('Average H:', H)
    print('Average weighted avg:', weighted_avg)
    print('Average accuracy:', accuracy)
    print('Average auc:', auc)


def cross_validation(data_tt):
    # cross validate the solution
    nr_splits = 9
    classification_reports = []
    kf = KFold(n_splits=nr_splits, shuffle=False)
    for train_index, test_index in kf.split(range(0, len(data_tt))):
        train_data = [data_tt[index] for index in train_index]
        test_data = [data_tt[index] for index in test_index]
        my_tree = build_tree(train_data)
        classification_reports.append(prediction_measures(test_data, my_tree))
    average_classification_reports(classification_reports)

def ui_start(training_data, data_tt):
    option = None
    my_tree = build_tree(training_data)
    while option != 0:
        print("Please select an option:")
        print("0. Exit")
        print("1. Print Tree from whole data")
        print("2. Classify 1 dataset row")
        print("3. Run Cross Validation")
        option = int(input())
        if option == 1:
            print_tree(my_tree)
            print('\n\n')
        if option == 2:
            index = int(input())
            print(training_data[index])
            print(classify(training_data[index], my_tree))
            print('\n\n')
        if option == 3:
            cross_validation(data_tt)
            print('\n\n')

data = pandas.read_csv("season-1819_csv.csv")

#keep only important columns, add result as last column
important_columns = [2,3]
for i in range(11, 23):
  important_columns.append(i)
important_columns.append(6)
features = data.iloc[:,important_columns]
# print(features)

headers = features.head()
header = list(headers.columns)
# print(header)

data_tt = features.to_numpy()
training_data = features.to_numpy()

ui_start(training_data, data_tt)

